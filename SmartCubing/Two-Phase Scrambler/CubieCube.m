//
//  CubieCube.m
//  CubeTimer Scramblers
//
//  Adapted from Chen Shuang's min2phase implementation of the Kociemba algorithm, as obtained from https://github.com/ChenShuang/min2phase
//
//  Copyright (c) 2011, Shuang Chen
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  Neither the name of the creator nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#import "CubieCube.h"
#import "Util.h"
@implementation CubieCube

@dynamic UDSlice, flip, flipSym, twist, twistSym, CPerm, CPermSym, EPerm, EPermSym, MPerm, MPermSym, U4Comb, D4Comb;
extern int SymInv[16];
extern int SymMult[16][16];
extern int SymMove[16][18];
extern int Sym8Mult[8][8];
extern int Sym8Move[8][18];
extern int SymMultInv[8][8];
extern int SymMoveUD[16][10];
extern int Sym8MultInv[8][8];

extern int FlipS2R[336];
extern int TwistS2R[324];
extern int EPermS2R[2768];
extern int permMult[24][24];
extern int SymMoveUD[16][10];
extern int SymStateTwist[324];
extern int SymStateFlip[336];
extern int SymStatePerm[2768];
extern int MtoEPerm[40320];
extern int e2c[];
extern int ud2std[];
extern int std2ud[];


/**
 * 16 symmetries generated by S_F2, S_U4 and S_LR2
 */
+(NSMutableArray*)CubeSym {
    
    static NSMutableArray *cubeSym = nil;
    if (!cubeSym) {
        cubeSym = [[NSMutableArray alloc] init];
        for (int x = 0; x < 16; x++) {
            [cubeSym addObject:[[CubieCube alloc] init]];
        }
    
    }
    return cubeSym;
}

/**
 * 18 move cubes
 */
+(NSMutableArray*)moveCube {
    
    static NSMutableArray *moveCube = nil;
    if (!moveCube) {
        moveCube = [[NSMutableArray alloc] init];
        for (int x = 0; x < 18; x++) {
            [moveCube addObject:[[CubieCube alloc] init]];
        }
    }
    return moveCube;
}


/**
 * Notice that Edge Perm Coordnate and Corner Perm Coordnate are the same symmetry structure.
 * So their ClassIndexToRepresentantArray are the same.
 * And when x is RawEdgePermCoordnate, y*16+k is SymEdgePermCoordnate, y*16+(k^e2c[k]) will
 * be the SymCornerPermCoordnate of the State whose RawCornerPermCoordnate is x.
 */


/**
 * Raw-Coordnate to Sym-Coordnate, only for speeding up initializaion.
 */
int FlipR2S[2048];// = new int[2048];
int TwistR2S[2187];// = new int[2187];
int EPermR2S[40320];// = new int[40320];

/**
 *
 */

+(CubieCube*) urf1 {
    
    static CubieCube *urf1 = nil;
    
    if (!urf1) {
       urf1 = [[super allocWithZone:NULL] initWithCPerm:2531 twist:1373 eperm:67026819 flip:1367];
    }
    return urf1;
}

+(CubieCube*) urf2 {
    
    static CubieCube *urf2 = nil;
    
    if (!urf2) {
        urf2 = [[super allocWithZone:NULL] initWithCPerm:2089 twist:1906 eperm:322752913 flip:2040];
    }
        
    return urf2;
}

CubieCube* temps = nil; //If you can do that, that is.

-(id)init {
    return  [self initWithCPerm:UINT32_MAX twist:UINT32_MAX eperm:UINT32_MAX flip:UINT32_MAX];
}



-(id)initWithCPerm:(int)cperm twist:(int)twist eperm:(int)eperm flip:(int)flip {
    if (self = [super init]) {
     //   self->cp = malloc(8*sizeof(int));
     //   self->co = malloc(8*sizeof(int));
    //    self.ep = malloc(12*sizeof(int));
    //    self->eo = malloc(12*sizeof(int));
        int tempCp[] = {0, 1, 2, 3, 4, 5, 6, 7};
        int tempCo[] = {0, 0, 0, 0, 0, 0, 0, 0};
        int tempEp[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11};
        int tempEo[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        for (unsigned x = 0 ; x < 8; x++) {
            self->cp[x] = tempCp[x];
            self->co[x] = tempCo[x];
        }
        for (int x = 0; x < 12; x++) {
            self->ep[x] = tempEp[x];
            self->eo[x] = tempEo[x];
        }
        if (!(cperm == UINT32_MAX && UINT32_MAX == eperm && flip == UINT32_MAX)) {
            [self setCPerm:cperm];
            [self setTwist:twist];
            setNPerm(ep, eperm, 12);
            [self setFlip:flip];
        }
        
    }
    return self;
}


-(void)setVariablesFromCubieCube:(CubieCube*)c {
    for (int i = 0; i < 8; i++) {
        self->cp[i] = c->cp[i];
        self->co[i] = c->co[i];
    }
    for (int i = 0; i < 12; i++) {
        self->ep[i] = c->ep[i];
        self->eo[i] = c->eo[i];
    }
}



-(void) invCubieCube { //Oh, dear. No idea what this does.
    for (int edge=0; edge<12; edge++)
        temps->ep[ep[edge]] = edge;
    for (int edge=0; edge<12; edge++)
        temps->eo[edge] = eo[temps->ep[edge]];
    for (int corn=0; corn<8; corn++)
        temps->cp[cp[corn]] = corn;
    for (int corn=0; corn<8; corn++) {
        int ori = co[temps->cp[corn]];
        temps->co[corn] = (int) -ori;
        if (temps->co[corn] < 0)
            temps->co[corn] += 3;
    }
    [self setVariablesFromCubieCube:temps];
}

/**
 * prod = a * b, Corner Only.
 */
+(void) CornMultWithCubeA:(CubieCube*)a cubeB:(CubieCube*)b cubeProd:(CubieCube*)prod {
    for (int corn=0; corn<8; corn++) {
        prod->cp[corn] = a->cp[b->cp[corn]];
        int oriA = a->co[b->cp[corn]];
        int oriB = b->co[corn];
        int ori = oriA;
        ori += (oriA<3) ? oriB : 6-oriB;
        ori %= 3;
        if ((oriA >= 3) ^ (oriB >= 3)) {
            ori += 3;
        }
        prod->co[corn] = ori;
    }
}

/**
 * prod = a * b, Edge Only.
 */
+(void) EdgeMultWithCubeA:(CubieCube*)a cubeB:(CubieCube*)b cubeProd:(CubieCube*)prod {
    for (int ed=0; ed<12; ed++) {
        prod->ep[ed] = a->ep[b->ep[ed]];
        prod->eo[ed] = (int) (b->eo[ed] ^ a->eo[b->ep[ed]]);
    }
}

/**
 * b = S_idx^-1 * a * S_idx, Corner Only.
 */
+(void) CornConjugateWithCubeA:(CubieCube*)a idx:(int)idx cubeB:(CubieCube*)b {
    //CubieCube sinv = CubeSym[SymInv[idx]];
    CubieCube *sinv = [[CubieCube CubeSym] objectAtIndex:SymInv[idx]];
    CubieCube *s = [[CubieCube CubeSym] objectAtIndex:idx];
    for (int corn=0; corn<8; corn++) {
        b->cp[corn] = sinv->cp[a->cp[s->cp[corn]]];
        int oriA = sinv->co[a->cp[s->cp[corn]]];
        int oriB = a->co[s->cp[corn]];
        b->co[corn] = (int) ((oriA<3) ? oriB : (3-oriB) % 3);
    }
}

/**
 * b = S_idx^-1 * a * S_idx, Edge Only.
 */
+ (void) EdgeConjugateWithCubeA:(CubieCube*)a idx:(int)idx cubeB:(CubieCube*)b {
    CubieCube *sinv = [[CubieCube CubeSym] objectAtIndex:SymInv[idx]];
    CubieCube *s = [[CubieCube CubeSym] objectAtIndex:idx];
    for (int ed=0; ed<12; ed++) {
        b->ep[ed] = sinv->ep[a->ep[s->ep[ed]]];
        b->eo[ed] = (int) (s->eo[ed] ^ a->eo[s->ep[ed]] ^ sinv->eo[a->ep[s->ep[ed]]]);
    }
}

/**
 * this = S_urf^-1 * this * S_urf.
 */
-(void) URFConjugate {
    if (temps == nil) {
        temps = [[CubieCube alloc] init];
    }
    [CubieCube CornMultWithCubeA:[CubieCube urf2] cubeB:self cubeProd:temps];
    [CubieCube CornMultWithCubeA:temps cubeB:[CubieCube urf1] cubeProd:self];
    [CubieCube EdgeMultWithCubeA:[CubieCube urf2] cubeB:self cubeProd: temps];
    [CubieCube EdgeMultWithCubeA:temps cubeB:[CubieCube urf1] cubeProd: self];
}

// ********************************************* Get and set coordinates *********************************************
// XSym : Symmetry Coordnate of X. MUST be called after initialization of ClassIndexToRepresentantArrays.

// ++++++++++++++++++++ Phase 1 Coordnates ++++++++++++++++++++
// Flip : Orientation of 12 Edges. Raw[0, 2048) Sym[0, 336 * 8)
// Twist : Orientation of 8 Corners. Raw[0, 2187) Sym[0, 324 * 8)
// UDSlice : Positions of the 4 UDSlice edges, the order is ignored. [0, 495)

-(int) flip {
    int idx = 0;
    for (int i=0; i<11; i++) {
        idx <<= 1;
        idx |= eo[i];
    }
    return idx;
}

-(void)setFlip:(int)idx {
    int parity = 0;
    for (int i=10; i>=0; i--) {
        parity ^= eo[i] = (int) (idx & 1);
        idx >>= 1;
    }
    eo[11] = (int)parity;
}

-(int) flipSym {
    if (FlipR2S != NULL) {
        return FlipR2S[[self flip]];
    }
    if (temps == nil) {
        temps = [[CubieCube alloc] init];
    }
    for (int k=0; k<16; k+=2) {
        [CubieCube EdgeConjugateWithCubeA:self idx:SymInv[k] cubeB:temps];
        int idx = binarySearch(FlipS2R, temps.flip, 336);
        if (idx != 0xffff) {
            return (idx << 3) | (k >> 1);
        }
    }
    return 0;
}

-(int) twist {
    int idx = 0;
    for (int i=0; i<7; i++) {
        idx *= 3;
        idx += co[i];
    }
    return idx;
}

-(void) setTwist:(int) idx {
    int twst = 0;
    for (int i=6; i>=0; i--) {
        twst += co[i] = (int) (idx % 3);
        idx /= 3;
    }
    co[7] = (int) ((15 - twst) % 3);
}

-(int) twistSym {
    if (TwistR2S != NULL) {
        return TwistR2S[[self twist]];
    }
    if (temps == nil) {
        temps = [[CubieCube alloc] init];
    }
    for (int k=0; k<16; k+=2) {
        [CubieCube CornConjugateWithCubeA:self idx:SymInv[k] cubeB:temps];
        int idx = binarySearch(TwistS2R, temps.twist, 324);
        if (idx != 0xffff) {
            return (idx << 3) | (k >> 1);
        }
    }
    return 0;
}

-(int)UDSlice {
    return getComb(ep, 8);
}

-(void) setUDSlice:(int)idx {
    setComb(ep, idx, 8);
}

-(int) U4Comb {
    return getComb(ep, 0);
}

-(int) D4Comb {
    return getComb(ep, 4);
}

// ++++++++++++++++++++ Phase 2 Coordnates ++++++++++++++++++++
// EPerm : Permutations of 8 UD Edges. Raw[0, 40320) Sym[0, 2187 * 16)
// Cperm : Permutations of 8 Corners. Raw[0, 40320) Sym[0, 2187 * 16)
// MPerm : Permutations of 4 UDSlice Edges. [0, 24)

-(int) CPerm {
    return get8Perm(cp);
}

-(void) setCPerm:(int) idx {
    set8Perm(self->cp, idx);
}

-(int) CPermSym {
    if (EPermR2S != NULL) {
        int idx = EPermR2S[[self CPerm]];
        idx ^= e2c[idx&0x0f];
        return idx;
    }
    if (temps == nil) {
        temps = [[CubieCube alloc] init];
    }
    for (int k=0; k<16; k++) {
        [CubieCube CornConjugateWithCubeA:self idx:SymInv[k] cubeB:temps];
        int idx = binarySearch(EPermS2R, [temps CPerm], 2768);
        if (idx != 0xffff) {
            return (idx << 4) | k;
        }
    }
    return 0;
}

-(int) EPerm {
    return get8Perm(ep);
}

-(void) setEPerm:(int) idx {
    set8Perm(ep, idx);
}

-(int) EPermSym {
    if (EPermR2S != NULL) {
        return EPermR2S[[self EPerm]];
    }
    if (temps == nil) {
        temps = [[CubieCube alloc] init];
    }
    for (int k=0; k<16; k++) {
        [CubieCube EdgeConjugateWithCubeA:self idx:SymInv[k] cubeB:temps];
        int idx = binarySearch(EPermS2R, temps.EPerm, 2768);
        if (idx != 0xffff) {
            return (idx << 4) | k;
        }
    }
    return 0;
}

-(int)MPerm {
    return getComb(ep, 8) >> 9;
}

-(void) setMPerm:(int) idx {
    setComb(ep, idx << 9, 8);
}

/**
 * Check a cubiecube for solvability. Return the error code.
 * 0: Cube is solvable
 * -2: Not all 12 edges exist exactly once
 * -3: Flip error: One edge has to be flipped
 * -4: Not all corners exist exactly once
 * -5: Twist error: One corner has to be twisted
 * -6: Parity error: Two corners or two edges have to be exchanged
 */
-(int) verify {
    int sum = 0;
    int edgeMask = 0;
    for (int e=0; e<12; e++)
        edgeMask |= (1 << ep[e]);
    if (edgeMask != 0x0fff)
        return -2;// missing edges
    for (int i=0; i<12; i++)
        sum ^= eo[i];
    if (sum % 2 != 0)
        return -3;
    int cornMask = 0;
    for (int c=0; c<8; c++)
        cornMask |= (1 << cp[c]);
    if (cornMask != 0x00ff)
        return -4;// missing corners
    sum = 0;
    for (int i=0; i<8; i++)
        sum += co[i];
    if (sum % 3 != 0)
        return -5;// twisted corner
    if ((getNParity(getNPerm(ep, 12), 12) ^ getNParity([self CPerm], 8)) != 0)
        return -6;// parity error
    return 0;// cube ok
}

//void resolve(Random gen) {
    
//}

// ********************************************* Initialization functions *********************************************

 +(void) initMove {
     NSMutableArray *moveCube = [CubieCube moveCube];
     [moveCube removeObjectAtIndex:0];
     [moveCube insertObject:[[CubieCube alloc] initWithCPerm:15120 twist:0 eperm:119750400 flip:0] atIndex:0];
     [moveCube removeObjectAtIndex:3];
     [moveCube insertObject:[[CubieCube alloc] initWithCPerm:21021 twist:1494 eperm:323403417 flip:0] atIndex:3];
     [moveCube removeObjectAtIndex:6];
     [moveCube insertObject:[[CubieCube alloc] initWithCPerm:8064 twist:1236 eperm:29441808 flip:550] atIndex:6];
     [moveCube removeObjectAtIndex:9];
     [moveCube insertObject:[[CubieCube alloc] initWithCPerm:9 twist:0 eperm:5880 flip:0] atIndex:9];
     [moveCube removeObjectAtIndex:12];
     [moveCube insertObject:[[CubieCube alloc] initWithCPerm:1230 twist:412 eperm:2949660 flip:0] atIndex:12];
     [moveCube removeObjectAtIndex:15];
     [moveCube insertObject:[[CubieCube alloc] initWithCPerm:224 twist:137 eperm:328552 flip:137] atIndex:15];
    for (int a=0; a<18; a+=3) {
        for (int p=0; p<2; p++) {
            [moveCube removeObjectAtIndex:(a+p+1)]; //Likely cause for problems.
            [moveCube insertObject:[[CubieCube alloc] init] atIndex:(a+p+1)];
            
            [CubieCube EdgeMultWithCubeA:[moveCube objectAtIndex:(a+p)] cubeB:[moveCube objectAtIndex:a] cubeProd:[moveCube objectAtIndex:(a+p+1)]];
            [CubieCube CornMultWithCubeA:[moveCube objectAtIndex:(a+p)] cubeB:[moveCube objectAtIndex:a] cubeProd:[moveCube objectAtIndex:(a+p+1)]];
        }
    }
}

+ (void) initSym {
    CubieCube *c = [[CubieCube alloc] init];
    CubieCube *d = [[CubieCube alloc] init];
    CubieCube *t = nil;
    
    CubieCube *f2 = [[CubieCube alloc] initWithCPerm:28783 twist:0 eperm:259268407 flip:0];
    CubieCube *u4 = [[CubieCube alloc] initWithCPerm:15138 twist:0 eperm:119765538 flip:7];
    CubieCube *lr2 = [[CubieCube alloc] initWithCPerm:5167 twist:0 eperm:83473207 flip:0];
    int newCo[] = { 3, 3, 3, 3, 3, 3, 3, 3 };
    for (int x = 0; x < 8; x++) {
        lr2->co[x] = newCo[x];
    }
    
    for (int i=0; i<16; i++) {
        CubieCube *newCube = [[CubieCube alloc] init];
        [[CubieCube CubeSym] replaceObjectAtIndex:i withObject:newCube];// Hopefully redundant rather than a big problem
        [newCube setVariablesFromCubieCube:c];
        [CubieCube CornMultWithCubeA:c cubeB:u4 cubeProd:d];
        [CubieCube EdgeMultWithCubeA:c cubeB:u4 cubeProd:d];
        t = d;	d = c;	c = t;
        if (i % 4 == 3) {
            [CubieCube CornMultWithCubeA:c cubeB:lr2 cubeProd:d];
            [CubieCube EdgeMultWithCubeA:c cubeB:lr2 cubeProd:d];
            t = d;	d = c;	c = t;
        }
        if (i % 8 == 7) {
            [CubieCube CornMultWithCubeA:c cubeB:f2 cubeProd:d];
            [CubieCube EdgeMultWithCubeA:c cubeB:f2 cubeProd:d];
            t = d;	d = c;	c = t;
        }
    }
    for (int i=0; i<16; i++) {
        for (int j=0; j<16; j++) {
            [CubieCube CornMultWithCubeA:[[CubieCube CubeSym] objectAtIndex:i] cubeB:[[CubieCube CubeSym] objectAtIndex:j] cubeProd:c];
            for (int k=0; k<16; k++) {
                CubieCube* workingCube = [[CubieCube CubeSym] objectAtIndex:k];
                if (workingCube->cp[0] == c->cp[0] && workingCube->cp[1] == c->cp[1] && workingCube->cp[2] == c->cp[2]) { //Horribly inefficient
                    SymMult[i][j] = k;
                    if (k==0) {
                        SymInv[i] = j;
                    }
                    break;
                }
            }
        }
    }
    for (int j=0; j<18; j++) {
        for (int s=0; s<16; s++) {
            [CubieCube CornConjugateWithCubeA:[[CubieCube moveCube] objectAtIndex:j] idx:SymInv[s] cubeB:c];
            int m=0;
            int i=0;
        label: //Let this comment serve as a reminder of my pain while writing this.
            for (; m<18; m++) {
                for (; i<8; i+=2) {
                    CubieCube *tempCube = [[CubieCube moveCube] objectAtIndex:m];
                    if (c->cp[i] != tempCube->cp[i]) {
                        //i++;
                        m++;
                        goto label;
                    }
                }
                SymMove[s][j] = m;
                break;
            }
        }
    }
    for (int j=0; j<10; j++) {
        for (int s=0; s<16; s++) {
            SymMoveUD[s][j] = std2ud[SymMove[s][ud2std[j]]];
        }
    }
    for (int j=0; j<8; j++) {
        for (int s=0; s<8; s++) {
            Sym8Mult[j][s] = SymMult[j<<1][s<<1]>>1;
            Sym8MultInv[j][s] = SymMult[j<<1][SymInv[s<<1]]>>1;
        }
    }
    for (int j=0; j<18; j++) {
        for (int s=0; s<8; s++) {
            Sym8Move[s][j] = SymMove[s<<1][j];
        }
    }
}

+(void) initFlipSym2Raw {
    CubieCube *c = [[CubieCube alloc] init];
    CubieCube *d = [[CubieCube alloc] init];
    int occ[2048 >> 5]; //Should be 64
    int count = 0;
    for (int i=0; i<2048>>5; occ[i++] = 0);
    //FlipR2S = malloc(2048*sizeof(int));
    for (int i=0; i<2048; i++) {
        if ((occ[(signed)i>>(signed)5]&(1<<(i&0x1f))) == 0) { //This shouldn't be called every time. << has been replaced with *2^
            [c setFlip:i];
            for (int s=0; s<16; s+=2) {
                [CubieCube EdgeConjugateWithCubeA:c idx:s cubeB:d];
                int idx = d.flip; //idx isn't getting its correct value because d differs
                if (idx == i) {
                    SymStateFlip[count] |= 1 << (s >> 1); 
                }
                occ[idx>>5] |= 1<<(idx&0x1f);
                FlipR2S[idx] = (int) ((count << 3) | (s >> 1));
            }
            FlipS2R[count++] = (int) i;
        }
    }
}

+(void) initTwistSym2Raw {
    CubieCube *c = [[CubieCube alloc] init];
    CubieCube *d = [[CubieCube alloc] init];
    int occ[2187/32+1];
    int count = 0;
    for (int i=0; i<2187/32+1; occ[i++] = 0);
    for (int i=0; i<2187; i++) {
        if ((occ[i>>5]&(1<<(i&0x1f))) == 0) {
            c.twist = i;
            for (int s=0; s<16; s+=2) {
                [CubieCube CornConjugateWithCubeA:c idx:s cubeB:d];
                int idx = d.twist;
                if (idx == i) {
                    SymStateTwist[count] |= 1 << (s >> 1);
                }
                occ[idx>>5] |= 1<<(idx&0x1f); //Problem point
                TwistR2S[idx] = (int) ((count << 3) | (s >> 1));
            }
            TwistS2R[count++] = (int) i;
        }
    }
}

+(void) initPermSym2Raw {
    CubieCube *c = [[CubieCube alloc] init];
    CubieCube *d = [[CubieCube alloc] init];
    int occ[40320 / 32];
    int count = 0;
    for (int i=0; i<40320/32; occ[i++] = 0);
    //EPermR2S = malloc(40320*sizeof(int));
    for (int i=0; i<40320; i++) {
        if ((occ[i>>5]&(1<<(i&0x1f))) == 0) {
            [c setEPerm:i];
            for (int s=0; s<16; s++) {
                [CubieCube EdgeConjugateWithCubeA:c idx:s cubeB:d];
                int idx = d.EPerm;
                if (idx == i) {
                    SymStatePerm[count] |= 1 << s;
                }
                occ[idx>>5] |= 1<<(idx&0x1f);
                int a = d.U4Comb;
                int b = d.D4Comb >> 9;
                int m = 494 - (a & 0x1ff) + (a >> 9) * 70 + b * 1680;
                MtoEPerm[m] = EPermR2S[idx] = (int) (count << 4 | s);
            }
            EPermS2R[count++] = (int) i;
        }
    }
}


@end
